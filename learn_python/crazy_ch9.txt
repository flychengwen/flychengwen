
------------------------------------------
导入python模块

import sys
print(sys.argv[1])

import sys as s
print(s.argv[1])

import sys,os
print(sys.argv[0])
print(os.sep)

from sys import argv
print(argv[0])

from sys import argv as v
print(v[0])

#linux下将执行失败
from sys import argv as v, winver as wv
print(v[0])
print(wv)
------------------------------------------------
定义模块
'''为模块编写的说明文档'''
为模块编写说明文档和测试代码

print('this is module1')
my_book='crazy python'
def say_hi(pp):
    print('%s, hello, welcome learn python'  % pp)
class person:
    def __init__(self, name):
        self.name=name
    def walk(self):
        print("%s is walking..."  % self.name)
    def __repr__(self):
        return 'my name is:%s'  % self.name
print("=========test code=================")
def test_my_book():
    print(my_book)
def test_say_hi():
    say_hi('sun wu kong')
    say_hi(person('Charlie'))
def test_person():
    u=person('zcw')
    u.walk()
    print(u)

test_my_book()
test_say_hi()
test_person()
------------------------------------------------
使用环境变量指定模块加载路径
vi  /etc/profile
PYTHONPATH=.:/home/test
export  PYTHONPATH
source /etc/profile
------------------------------------------------
默认的模块加载路径
import sys,pprint
pprint.pprint(sys.path)

['/home/test',
 '/usr/lib/python38.zip',
 '/usr/lib/python3.8',
 '/usr/lib/python3.8/lib-dynload',
 '/usr/local/lib/python3.8/dist-packages',
 '/usr/lib/python3/dist-packages']
 
root@2004a:~# python3 -V
Python 3.8.10


cd /usr/lib/python3/dist-packages
root@2004a:/usr/lib/python3/dist-packages# cat print_shape.py 
li=['python', 'java', 'swift']
def print_triangle(n):
    if n<=0:
        raise ValueError('n must be gt 0')
    for i in range(n):
        #print(i)
        print(' '*(n-i-1), end=' ')
        print('*'*(2*i+1))
def test_print_triangle():
    print_triangle(7)
    print("\n\n")
    print_triangle(4)
    print("\n\n")
    print_triangle(3)
if __name__ == '__main__': test_print_triangle() 

root@2004a:/# python3
>>> import print_shape
>>> print(print_shape.__doc__)
None
>>> print_shape.li[2]
'swift'
>>> print_shape.print_triangle(4)
 
---------------------------------------------------
导入模块的本质
会执行模块中的可执行语句
会产生一个模块变量，类型为module，将整个模块的内容赋值给它

vi /etc/profile
PYTHONPATH=/home/test
export  PYTHONPATH
source /etc/profile

root@2004a:/home/test# cat fk_module.py 
print("this is fk_module")
name="fkit"
def hello():
    print("hello, python")

env | grep PYTHONPATH
root@2004a:/# cat test.py 
import fk_module
print(type(fk_module))
print("===================")
print(fk_module)
print(fk_module.name)
---------------------------------------------------
模块的__all__变量
不希望导出所有的变量和方法，使用__all__列出允许被导出的属性和方法

vi /etc/profile
PYTHONPATH=/home/test
export  PYTHONPATH
source /etc/profile

root@2004a:/home/test# cat all_module.py 
def hello():
    print("hello, python")
def world():
    print("python3 world is funny")
def test():
    print("--test--")
__all__ = ['hello', 'world']


root@2004a:/# cat test.py 
from all_module import *

hello()
world()
#test()
root@2004a:/# 
---------------------------------------------------
包和模块的关系
包就是文件夹，该文件夹下包含了多个模块源文件

root@2004a:/home/test# tree
.
└── first_package
    ├── arithmetic_chart.py
    ├── billing.py
    ├── __init__.py
    ├── print_shape.py
	
root@2004a:/home/test/first_package# cat arithmetic_chart.py 
def print_arithmetic_chart(n):
    for i in range(n):
        for j in range(i+1):
            print('%d * %d = %2d' %((j+1), (i+1), (j+1)*(i+1)), end=' ')
        print(' ')
root@2004a:/home/test/first_package# 
root@2004a:/home/test/first_package# cat __init__.py 
'''this is first example'''
print('this is first_package')
root@2004a:/home/test/first_package# 
root@2004a:/home/test/first_package# cat arithmetic_chart.py 
def print_arithmetic_chart(n):
    for i in range(n):
        for j in range(i+1):
            print('%d * %d = %2d' %((j+1), (i+1), (j+1)*(i+1)), end=' ')
        print(' ')
root@2004a:/home/test/first_package# 
root@2004a:/home/test/first_package# cat billing.py 
class Item:
    def __init__(self, price):
        self.price=price
    def __repr__(self):
        return 'Item[price=%g]' % self.price
root@2004a:/home/test/first_package# 
root@2004a:/home/test/first_package# cat print_shape.py 
def print_blank_triangle(n):
    if n<=0:
        raise ValueError('n must be gt 0')
    for i in range(n):
        print(' '*(n-i-1), end='')
        print('*'*(2*i+1))
root@2004a:/home/test/first_package# 


root@2004a:/# cat test.py 
import first_package    #实际上就是导入包下的__init__.py文件
import first_package.print_shape
from first_package import billing
import first_package.arithmetic_chart

first_package.print_shape.print_blank_triangle(5)
ii = billing.Item(4.5)
print(ii)
first_package.arithmetic_chart.print_arithmetic_chart(9)
---------------------------------------------------
查看模块内容
>>> string.__all__
>>> import string
>>> dir(string)
>>> [e for e in dir(string) if not e .startswith('_')] 

查看模块内容的帮助信息和源文件路径
>>> help(string.capwords)
>>> print(string.capwords.__doc__)
>>> string.capwords('abc xyz')

---------------------------------------------------
使用__file__属性查看模块的源文件路径
>>> string.__file__
'/usr/lib/python3.8/string.py'







